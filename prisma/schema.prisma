generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "mysql"
  provider = "postgresql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text

  countryId  String? 
  country    Country?  @relation("CountryToProfile", fields: [countryId], references: [id])
  streetAddress String? @db.Text
  city String? @db.Text
  stateProvince String? @db.Text
  zipCode String? @db.Text
  phoneNumber String? @db.Text

  isAgent Boolean   @default(false)
  store Store?
  role Role @default(USER)

  groups Group[]
  members Member[]
  channels Channel[]
  products Product[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([countryId])

}

model Store{
   id String @id @default(uuid())
   storeName String @default("")
   username String @unique @default("")
   logoUrl String? @db.Text

   profileId String @unique
   profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Group {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]
  channels Channel[]
  products Product[]

  maxMembers Int @default(3)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

enum Role {
  USER
  SUPERADMIN
}

model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  groupId String
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  messages Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([groupId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
   INFO
}

model Product {
  id        String   @id @default(uuid())
  name     String
  price     Decimal
  description String @default("")
  categoryId  String    // Foreign Key to Category
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])

  moq  Int      @default(100)
  weight String? @default("N/A") 
  isArchived  Boolean   @default(false)

  groupId String?
  group Group? @relation(fields: [groupId], references: [id])
  

  profileId String 
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade) 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  images      Image[]  

  @@index([profileId])
  @@index([categoryId])
  @@index([groupId])
}

model Category {
  id          String   @id @default(uuid())
  name        String
  products    Product[]   @relation("CategoryToProduct")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Country {
  id          String   @id @default(uuid())
  name        String
  profiles    Profile[]   @relation("CountryToProfile")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Image {
  id          String   @id @default(uuid())
  productId   String   
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url        String @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}

model Channel {
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  groupId String
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([groupId])
}

model Message {
  id String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}

